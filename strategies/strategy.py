from __future__ import print_function

from abc import ABCMeta, abstractmethod

try:
    import Queue as queue
except ImportError:
    import queue


class Strategy(object):
    """
    Strategy is an abstract base class providing an interface for
    all subsequent (inherited) strategy handling objects.
    The goal of a (derived) Strategy object is to generate Signal
    objects for particular symbols based on the inputs of Bars
    (OHLCV) generated by a DataHandler object.
    This is designed to work both with historic and live data as
    the Strategy object is agnostic to where the data came from,
    since it obtains the bar tuples from a queue object.
    """
    __metaclass__ = ABCMeta

    @abstractmethod
    def calculate_signals(self, event):
        """
        Provides the mechanisms to calculate the list of signals.
        """
        raise NotImplementedError("Should implement calculate_signals()")

    def calculate_stop_loss_price(self, price, stop_loss_pips, direction):
        stop_loss = None

        if stop_loss_pips is None or stop_loss_pips == 0:
            return None

        if direction == 'LONG':
            stop_loss = price - (stop_loss_pips * self.get_pip_value())
        elif direction == 'SHORT':
            stop_loss = price + (stop_loss_pips * self.get_pip_value())

        return stop_loss

    def calculate_take_profit_price(self, price, take_profit_pips, direction):
        take_profit = None

        if take_profit_pips is None or take_profit_pips == 0:
            return None

        if direction == 'LONG':
            take_profit = price + (take_profit_pips * self.get_pip_value())
        elif direction == 'SHORT':
            take_profit = price - (take_profit_pips * self.get_pip_value())

        return take_profit

    @staticmethod
    def get_pip_value():
        return 0.00001


    @staticmethod
    def get_strategy_params(args_namespace):
        raise NotImplementedError("Should implement get_strategy_params()")


    @staticmethod
    def create_argument_parser(backtest_only):
        raise NotImplementedError("Should implement create_argument_parser()")
