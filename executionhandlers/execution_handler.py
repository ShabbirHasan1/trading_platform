from __future__ import print_function
from abc import ABCMeta, abstractmethod

try:
    import Queue as queue
except ImportError:
    import queue


class ExecutionHandler(object):
    """
    The ExecutionHandler abstract class handles the interaction
    between a set of order objects generated by a Portfolio and
    the ultimate set of Fill objects that actually occur in the
    market.
    The handlers can be used to subclass simulated brokerages
    or live brokerages, with identical interfaces. This allows
    strategies to be backtested in a very similar manner to the
    live trading engine.
    """
    __metaclass__ = ABCMeta

    @abstractmethod
    def execute_order(self, event):
        """
        Takes an Order event and executes it, producing
        a Fill event that gets placed onto the Events queue.
        Parameters:
        event - Contains an Event object with order information.
        """
        raise NotImplementedError("Should implement execute_order()")

    @abstractmethod
    def update_stop_and_limit_orders(self, market_event):
        """
        Takes an Market event and check if some of the stop or limit orders should be changed do market
        """
        raise NotImplementedError("Should implement update_stop_and_limit_orders()")

    @abstractmethod
    def clear_limit_or_stop_orders(self, close_pending_orders_event):
        """
        Takes an ClosePendingOrders event and clear pending orders
        """
        raise NotImplementedError("Should implement clear_limit_or_stop_orders()")
